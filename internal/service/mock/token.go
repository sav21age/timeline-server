// Code generated by MockGen. DO NOT EDIT.
// Source: token.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	domain "timeline/internal/domain"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockTokenInterface is a mock of TokenInterface interface.
type MockTokenInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTokenInterfaceMockRecorder
}

// MockTokenInterfaceMockRecorder is the mock recorder for MockTokenInterface.
type MockTokenInterfaceMockRecorder struct {
	mock *MockTokenInterface
}

// NewMockTokenInterface creates a new mock instance.
func NewMockTokenInterface(ctrl *gomock.Controller) *MockTokenInterface {
	mock := &MockTokenInterface{ctrl: ctrl}
	mock.recorder = &MockTokenInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenInterface) EXPECT() *MockTokenInterfaceMockRecorder {
	return m.recorder
}

// DeleteRefreshToken mocks base method.
func (m *MockTokenInterface) DeleteRefreshToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockTokenInterfaceMockRecorder) DeleteRefreshToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockTokenInterface)(nil).DeleteRefreshToken), ctx, token)
}

// FindRefreshToken mocks base method.
func (m *MockTokenInterface) FindRefreshToken(ctx context.Context, token string) (domain.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRefreshToken", ctx, token)
	ret0, _ := ret[0].(domain.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRefreshToken indicates an expected call of FindRefreshToken.
func (mr *MockTokenInterfaceMockRecorder) FindRefreshToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRefreshToken", reflect.TypeOf((*MockTokenInterface)(nil).FindRefreshToken), ctx, token)
}

// GenerateTokenPair mocks base method.
func (m *MockTokenInterface) GenerateTokenPair(id primitive.ObjectID) (domain.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenPair", id)
	ret0, _ := ret[0].(domain.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokenPair indicates an expected call of GenerateTokenPair.
func (mr *MockTokenInterfaceMockRecorder) GenerateTokenPair(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenPair", reflect.TypeOf((*MockTokenInterface)(nil).GenerateTokenPair), id)
}

// SaveRefreshToken mocks base method.
func (m *MockTokenInterface) SaveRefreshToken(ctx context.Context, refreshTokenRecord domain.RefreshTokenRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", ctx, refreshTokenRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockTokenInterfaceMockRecorder) SaveRefreshToken(ctx, refreshTokenRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockTokenInterface)(nil).SaveRefreshToken), ctx, refreshTokenRecord)
}

// ValidateAccessToken mocks base method.
func (m *MockTokenInterface) ValidateAccessToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccessToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAccessToken indicates an expected call of ValidateAccessToken.
func (mr *MockTokenInterfaceMockRecorder) ValidateAccessToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccessToken", reflect.TypeOf((*MockTokenInterface)(nil).ValidateAccessToken), token)
}
