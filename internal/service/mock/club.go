// Code generated by MockGen. DO NOT EDIT.
// Source: club.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	domain "timeline/internal/domain"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockClubInterface is a mock of ClubInterface interface.
type MockClubInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClubInterfaceMockRecorder
}

// MockClubInterfaceMockRecorder is the mock recorder for MockClubInterface.
type MockClubInterfaceMockRecorder struct {
	mock *MockClubInterface
}

// NewMockClubInterface creates a new mock instance.
func NewMockClubInterface(ctrl *gomock.Controller) *MockClubInterface {
	mock := &MockClubInterface{ctrl: ctrl}
	mock.recorder = &MockClubInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClubInterface) EXPECT() *MockClubInterfaceMockRecorder {
	return m.recorder
}

// GetClubById mocks base method.
func (m *MockClubInterface) GetClubById(ctx context.Context, clubId int) (domain.Club, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClubById", ctx, clubId)
	ret0, _ := ret[0].(domain.Club)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClubById indicates an expected call of GetClubById.
func (mr *MockClubInterfaceMockRecorder) GetClubById(ctx, clubId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubById", reflect.TypeOf((*MockClubInterface)(nil).GetClubById), ctx, clubId)
}

// GetClubs mocks base method.
func (m *MockClubInterface) GetClubs(ctx *gin.Context, queryParams domain.GetClubsQueryParams) ([]domain.ClubDTO, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClubs", ctx, queryParams)
	ret0, _ := ret[0].([]domain.ClubDTO)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClubs indicates an expected call of GetClubs.
func (mr *MockClubInterfaceMockRecorder) GetClubs(ctx, queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubs", reflect.TypeOf((*MockClubInterface)(nil).GetClubs), ctx, queryParams)
}

// GetClubsAreas mocks base method.
func (m *MockClubInterface) GetClubsAreas(ctx *gin.Context) ([]domain.AreaClub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClubsAreas", ctx)
	ret0, _ := ret[0].([]domain.AreaClub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClubsAreas indicates an expected call of GetClubsAreas.
func (mr *MockClubInterfaceMockRecorder) GetClubsAreas(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubsAreas", reflect.TypeOf((*MockClubInterface)(nil).GetClubsAreas), ctx)
}

// GetClubsBySeasonId mocks base method.
func (m *MockClubInterface) GetClubsBySeasonId(ctx *gin.Context, seasonId int) ([]domain.ClubDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClubsBySeasonId", ctx, seasonId)
	ret0, _ := ret[0].([]domain.ClubDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClubsBySeasonId indicates an expected call of GetClubsBySeasonId.
func (mr *MockClubInterfaceMockRecorder) GetClubsBySeasonId(ctx, seasonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubsBySeasonId", reflect.TypeOf((*MockClubInterface)(nil).GetClubsBySeasonId), ctx, seasonId)
}
